{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "6ea8f058",
   "metadata": {},
   "source": [
    "\n",
    "# ü§ñ Aula 7: Criando um Chatbot que Trabalha em Equipe com Outros Agentes de IA\n",
    "\n",
    "Neste notebook, vamos construir um chatbot que pode delegar tarefas a m√∫ltiplos agentes especializados.\n",
    "\n",
    "## üìå O que faremos:\n",
    "1. **Entender como funciona um sistema multiagente** e sua arquitetura.\n",
    "2. **Fundamenta√ß√£o matem√°tica**: Markov Decision Processes para m√∫ltiplos agentes (MD-MDPs).\n",
    "3. **Implementar um chatbot que delega tarefas para agentes especializados**.\n",
    "4. **Criar um fluxo de comunica√ß√£o eficiente entre agentes**.\n",
    "5. **Testar um fluxo de colabora√ß√£o din√¢mica entre os agentes**.\n",
    "\n",
    "---\n",
    "\n",
    "## üìñ O que √© um Sistema Multiagente?\n",
    "\n",
    "Um sistema multiagente √© composto por v√°rios **AI Agents** que cooperam para resolver problemas. Podemos dividir os agentes em:\n",
    "\n",
    "1. **Agentes Independentes**: Cada agente trabalha sozinho e responde apenas ao que foi perguntado.\n",
    "2. **Agentes Colaborativos**: Os agentes trocam informa√ß√µes para resolver tarefas mais complexas.\n",
    "3. **Agentes Hier√°rquicos**: H√° um agente principal que coordena as respostas dos outros.\n",
    "\n",
    "### **Matem√°tica por Tr√°s de Sistemas Multiagentes**\n",
    "\n",
    "Podemos modelar um sistema multiagente usando **Markov Decision Processes para M√∫ltiplos Agentes (MD-MDPs)**:\n",
    "\n",
    "- Cada agente \\( i \\) possui um conjunto de estados \\( S_i \\).\n",
    "- Cada agente pode tomar uma a√ß√£o \\( A_i \\) baseada no estado.\n",
    "- O sistema tem uma **fun√ß√£o de transi√ß√£o** \\( P(s' | s, a) \\) que define a evolu√ß√£o do estado com base nas a√ß√µes dos agentes.\n",
    "- Cada agente recebe uma **recompensa \\( R_i(s, a) \\)** com base na contribui√ß√£o para o objetivo geral.\n",
    "\n",
    "A colabora√ß√£o entre agentes pode ser modelada usando **aprendizado por refor√ßo multiagente**, onde os agentes aprendem a otimizar suas a√ß√µes com base em feedback do ambiente.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3017887e",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "# Instale a biblioteca OpenAI se ainda n√£o estiver instalada\n",
    "!pip install openai\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dd54c583",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "import openai\n",
    "\n",
    "# Defina sua chave de API (substitua 'SUA_CHAVE_AQUI' pela chave real)\n",
    "openai.api_key = \"SUA_CHAVE_AQUI\"\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "78cd3257",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "# Agente especializado em pesquisa\n",
    "def agente_pesquisa(pergunta):\n",
    "    return f\"Buscando informa√ß√µes para: {pergunta}\"\n",
    "\n",
    "# Agente especializado em an√°lise de texto\n",
    "def agente_analise(pergunta):\n",
    "    return f\"Realizando an√°lise sobre: {pergunta}\"\n",
    "\n",
    "# Agente especializado em finan√ßas\n",
    "def agente_financeiro(pergunta):\n",
    "    return f\"Buscando cota√ß√£o atualizada para: {pergunta}\"\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1e1cfff1",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "# Instale as bibliotecas necess√°rias\n",
    "!pip install openai langchain numpy\n",
    "\n",
    "import openai\n",
    "from langchain.agents import initialize_agent, Tool\n",
    "from langchain.llms import OpenAI\n",
    "import numpy as np\n",
    "\n",
    "# Defina sua chave de API aqui (substitua 'SUA_CHAVE_AQUI' pela chave real)\n",
    "openai.api_key = \"SUA_CHAVE_AQUI\"\n",
    "\n",
    "# Criando agentes especializados\n",
    "def agente_pesquisa(pergunta):\n",
    "    return f\"üîç Buscando informa√ß√µes para: {pergunta}\"\n",
    "\n",
    "def agente_analise(pergunta):\n",
    "    return f\"üìä Realizando an√°lise sobre: {pergunta}\"\n",
    "\n",
    "def agente_financeiro(pergunta):\n",
    "    return f\"üí∞ Buscando cota√ß√£o atualizada para: {pergunta}\"\n",
    "\n",
    "# Criando um sistema multiagente usando LangChain\n",
    "tools = [\n",
    "    Tool(name=\"Pesquisa\", func=agente_pesquisa, description=\"Para buscar informa√ß√µes gerais.\"),\n",
    "    Tool(name=\"An√°lise de Dados\", func=agente_analise, description=\"Para realizar an√°lise aprofundada de um tema.\"),\n",
    "    Tool(name=\"Finan√ßas\", func=agente_financeiro, description=\"Para buscar cota√ß√µes e informa√ß√µes financeiras.\")\n",
    "]\n",
    "\n",
    "# Criando um agente orquestrador\n",
    "def roteador_de_agentes(pergunta):\n",
    "    if \"pesquisa\" in pergunta.lower():\n",
    "        return agente_pesquisa(pergunta)\n",
    "    elif \"an√°lise\" in pergunta.lower():\n",
    "        return agente_analise(pergunta)\n",
    "    elif \"cota√ß√£o\" in pergunta.lower():\n",
    "        return agente_financeiro(pergunta)\n",
    "    else:\n",
    "        return \"ü§ñ N√£o sei como responder isso. Tente reformular sua pergunta.\"\n",
    "\n",
    "# Simula√ß√£o de agentes colaborando para resolver um problema\n",
    "def multiagente_colaborativo(pergunta):\n",
    "    resposta_pesquisa = agente_pesquisa(pergunta)\n",
    "    resposta_analise = agente_analise(resposta_pesquisa)\n",
    "    resposta_final = f\"Resultado final da colabora√ß√£o:\n",
    "{resposta_analise}\"\n",
    "    return resposta_final\n",
    "\n",
    "# Teste do sistema multiagente\n",
    "print(multiagente_colaborativo(\"Como a IA impacta o mercado financeiro?\"))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "68641b00",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "# Chatbot que usa m√∫ltiplos agentes para obter respostas especializadas\n",
    "def chatbot_multiagente(pergunta):\n",
    "    resposta = roteador_de_agentes(pergunta)\n",
    "    return f\"Chatbot: {resposta}\"\n",
    "\n",
    "# Testando o chatbot\n",
    "print(chatbot_multiagente(\"Me fa√ßa uma pesquisa sobre Marte.\"))\n",
    "print(chatbot_multiagente(\"Preciso de uma an√°lise sobre mudan√ßas clim√°ticas.\"))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7aa20d0a",
   "metadata": {},
   "source": [
    "\n",
    "## üéØ Desafio para os alunos!\n",
    "1. Criar um chatbot que delega tarefas para m√∫ltiplos agentes.\n",
    "2. Implementar um agente extra que pode buscar informa√ß√µes externas.\n",
    "3. Integrar diferentes modelos para dar respostas mais ricas e variadas.\n",
    "\n",
    "---\n"
   ]
  }
 ],
 "metadata": {},
 "nbformat": 4,
 "nbformat_minor": 5
}
